apiVersion: v1
kind: Namespace
metadata: 
  name: grace-dev

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: grace-environment
data:
  ASPNETCORE_ENVIRONMENT: Development
  ASPNETCORE_HTTP_PORTS: "5000"
  ASPNETCORE_HTTPS_PORTS: "5001"
  # ASPNETCORE_Kestrel__Certificates__Default__Path: /https/aspnetapp.pfx
  # ASPNETCORE_Kestrel__Certificates__Default__Password: CrypticPassword8=5
  APPLICATIONINSIGHTS_CONNECTION_STRING: "InstrumentationKey=e0955eb4-1817-4a94-bf6e-d48f6ae54a8c;IngestionEndpoint=https://westus2-2.in.applicationinsights.azure.com/"
  DAPR_APP_PORT: "5000"
  DAPR_HTTP_PORT: "3500"
  DAPR_GRPC_PORT: "50001"
  DAPR_SERVER_URI: http://localhost
  Logging__LogLevel__Default: "Information"
  #Logging__LogLevel__Default: "Debug"
  TEMP: /tmp
  DOTNET_DiagnosticPorts: "/diag/dotnet-monitor.sock"

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  labels:
    app: prometheus
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
    scrape_configs:
      - job_name: 'dotnet-monitor'
        scrape_interval: 5s
        static_configs:
          - targets: ['dotnet-monitor-service:80']

---

apiVersion: v1
kind: Service
metadata:
  name: dotnet-monitor-service
spec:
  selector:
    app: grace-server
  ports:
    - protocol: TCP
      port: 80
      targetPort: 52323  # The port `dotnet monitor` is listening on
  type: ClusterIP

---

apiVersion: v1
kind: Service
metadata:
  name: grace-server
  labels:
    app: grace-server
spec:
  type: LoadBalancer
  ports:
  - name: http
    port: 5000
    targetPort: http-grace
  - name: https
    port: 5001
    targetPort: https-grace
  - name: zipkin
    port: 9412
    targetPort: 9412
  - name: prometheus
    port: 9090
    targetPort: 9090
  - name: grafana
    port: 3000
    targetPort: 3000
  selector:
    app: grace-server

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  #storageClassName: standard  # Adjust this according to your cluster's storage class

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: grace-server
  labels:
    app: grace-server
spec:
  replicas: 2
  selector:
    matchLabels:
      app: grace-server
  template:
    metadata:
      labels:
        app: grace-server
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: /metrics
        prometheus.io/port: "8080"
        dapr.io/enabled: "true"
        dapr.io/app-id: "grace-server"
        dapr.io/app-port: "5000"
        dapr.io/enable-metrics: "true"
        #dapr.io/env: "GOMEMLIMIT=700MiB"
        dapr.io/log-level: "debug"
        dapr.io/metrics-exporter-type: "prometheus"
        dapr.io/metrics-port: "9090"  # Ensure this matches the port exposed by the Prometheus exporter in the OpenTelemetry Collector configuration
        #dapr.io/placement-host-address: "127.0.0.1:50005"
        dapr.io/sidecar-cpu-limit: "1.5"
        dapr.io/sidecar-memory-limit: "768Mi"
        dapr.io/sidecar-cpu-request: "0.25"
        dapr.io/sidecar-memory-request: "256Mi"
    spec:
      volumes:
      # - name: secrets-store01-inline
      #   csi:
      #     driver: secrets-store.csi.k8s.io
      #     readOnly: true
      #     volumeAttributes:
      #       secretProviderClass: "azure-kv-provider"
      - name: dapr-config
        hostPath:
          path: /mnt/c/Users/Scott/.dapr/
          type: Directory
      # - name: secret-volume
      #   secret:
      #     secretName: gracedevcert
      - name: otel-config
        configMap:
          name: otel-collector-config
      - name: prometheus-config
        configMap:
          name: prometheus-config
      - name: grafana-storage
        persistentVolumeClaim:
          claimName: grafana-pvc
      - name: diagvol
        emptyDir: {}
      containers:
      - name: grace-server
        image: scottarbeit/grace-server:latest 
        ports:
        - containerPort: 5000
          name: http-grace
          protocol: TCP
        - containerPort: 5001
          name: https-grace
          protocol: TCP
        volumeMounts:
        # - name: secrets-store01-inline
        #   mountPath: "/mnt/secrets-store"
        #   readOnly: true
        # - name: secret-volume
        #   mountPath: /etc/certificates
        #   readOnly: true
        - name: otel-config
          mountPath: /etc/otel/config.yaml
          readOnly: true
        - name: diagvol
          mountPath: /diag
        # volumeMounts:
        #   - name: dapr-config
        #     mountPath: /dapr/
        #     readOnly: true
        resources:
          limits:
            cpu: "4.0"
            memory: "8192Mi"
          requests:
            cpu: "4.0"
            memory: "8192Mi"
        envFrom:
        - configMapRef:
            name: grace-environment
        env:
        - name: azurestorageconnectionstring
          valueFrom:
            secretKeyRef:
              name: azurestorageconnectionstring
              key: azurestorageconnectionstring
        - name: azurestoragekey
          valueFrom:
            secretKeyRef:
              name: azurestoragekey
              key: azurestoragekey
        - name: azurecosmosdbconnectionstring
          valueFrom:
            secretKeyRef:
              name: azurecosmosdbconnectionstring
              key: azurecosmosdbconnectionstring
        - name: cosmosdatabasename
          valueFrom:
            secretKeyRef:
              name: cosmosdatabasename
              key: cosmosdatabasename
        - name: cosmoscontainername
          valueFrom:
            secretKeyRef:
              name: cosmoscontainername
              key: cosmoscontainername
      - name: monitor
        image: mcr.microsoft.com/dotnet/monitor:8
        # DO NOT use the --no-auth argument for deployments in production; this argument is used for demonstration
        # purposes only in this example. Please continue reading after this example for further details.
        args: [ "collect", "--no-auth" ]
        imagePullPolicy: Always
        env:
        - name: DOTNETMONITOR_DiagnosticPort__ConnectionMode
          value: Listen
        - name: DOTNETMONITOR_Storage__DefaultSharedPath
          value: /diag
        # ALWAYS use the HTTPS form of the URL for deployments in production; the removal of HTTPS is done for
        # demonstration purposes only in this example. Please continue reading after this example for further details.
        - name: DOTNETMONITOR_Urls
          value: http://localhost:52323
        # The metrics URL is set in the CMD instruction of the image by default. However, this deployment overrides that with the args setting; manually set the URL to the same value using configuration.
        - name: DOTNETMONITOR_Metrics__Endpoints
          value: http://+:52325
        volumeMounts:
        - name: diagvol
          mountPath: /diag
        resources:
          requests:
            cpu: 50m
            memory: 32Mi
          limits:
            cpu: 250m
            memory: 256Mi
      - name: opentelemetry-collector
        image: otel/opentelemetry-collector:latest
        env:
        - name: APPLICATIONINSIGHTS_CONNECTION_STRING
          valueFrom:
            secretKeyRef:
              name: applicationinsightsconnectionstring
              key: applicationinsightsconnectionstring
        ports:
        - containerPort: 4317 # gRPC port for traces
          protocol: TCP
        - containerPort: 4318 # HTTP port for traces and metrics
          protocol: TCP
        - containerPort: 55681 # HTTP port for logs (OTLP/HTTP)
          protocol: TCP
        volumeMounts:
        - name: otel-config
          mountPath: /etc/otel/config.yaml
          subPath: otel-collector-config.yaml
        resources:
          limits:
            cpu: "0.75"
            memory: "768Mi"
          requests:
            cpu: "0.25"
            memory: "256Mi"
      - name: zipkin
        image: openzipkin/zipkin:latest
        ports:
        - containerPort: 9412
          name: zipkin
          protocol: TCP
        env:
          - name: SERVER_PORT
            value: "9412"
        resources:
          limits:
            cpu: "0.75"
            memory: "768Mi"
          requests:
            cpu: "0.25"
            memory: "256Mi"
      # - name: prometheus
      #   image: prom/prometheus:latest
      #   args:
      #       - "--config.file=/etc/prometheus/prometheus.yml"
      #   ports:
      #   - containerPort: 9090
      #     name: prometheus
      #     protocol: TCP
      #   volumeMounts:
      #   - name: prometheus-config
      #     mountPath: /etc/prometheus
      #     readOnly: true
      #   resources:
      #     limits:
      #       cpu: "2.0"
      #       memory: "1Gi"
      #     requests:
      #       cpu: "0.25"
      #       memory: "400Mi"
      - name: grafana
        image: grafana/grafana:latest
        ports:
        - containerPort: 3000
          name: grafana
          protocol: TCP
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
        resources:
          limits:
            cpu: "2.0"
            memory: "1Gi"
          requests:
            cpu: "0.25"
            memory: "400Mi"
